"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var baseError = function () {
  'use strict';

  function formatErrorMessage(msg, additional) {
    return additional.length ? additional.reduce(function (a, c) {
      return "".concat(a, "\n").concat(JSON.stringify(c));
    }, msg) : msg;
  }

  var BaseError =
  /*#__PURE__*/
  function (_Error) {
    (0, _inherits2.default)(BaseError, _Error);

    function BaseError(err) {
      var _this;

      (0, _classCallCheck2.default)(this, BaseError);

      for (var _len = arguments.length, additional = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        additional[_key - 1] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BaseError).call(this, formatErrorMessage(err, additional)));

      if (err instanceof Error) {
        _this.original = err;
        _this.stack = err.stack;
        _this.message = formatErrorMessage(err.message, additional);
      } else {
        if (Error.captureStackTrace) {
          Error.captureStackTrace((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), _this.constructor);
        }

        _this.message = formatErrorMessage(err, additional);
      }

      _this.name = _this.constructor.name;
      return _this;
    }

    return BaseError;
  }((0, _wrapNativeSuper2.default)(Error));

  return BaseError;
}();